/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.zarowska.cirkle.api.rest;

import java.io.File;
import com.zarowska.cirkle.api.model.FilePage;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-02-06T01:58:39.202110500+01:00[Europe/Warsaw]")
@Validated
@Tag(name = "Images", description = "the Images API")
public interface ImagesApi {

    default ImagesApiDelegate getDelegate() {
        return new ImagesApiDelegate() {};
    }

    /**
     * GET /images/{imageId} : Download image
     * Download image by id
     *
     * @param imageId  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "downloadImageById",
        summary = "Download image",
        description = "Download image by id",
        tags = { "Images" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "image/apng", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "image/avif", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "image/gif", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "image/jpeg", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "image/png", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "image/svg+xml", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "image/webp", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearer-key")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/images/{imageId}",
        produces = { "image/apng", "image/avif", "image/gif", "image/jpeg", "image/png", "image/svg+xml", "image/webp" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> downloadImageById(
        @Parameter(name = "imageId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("imageId") UUID imageId,
        @Parameter(name = "width", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "width", required = false) Integer width,
        @Parameter(name = "height", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "height", required = false) Integer height
    ) {
        return getDelegate().downloadImageById(imageId, width, height);
    }


    /**
     * GET /user/images/{imageId} : Get image info by id
     * List own image info by id
     *
     * @param imageId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getImageInfoById",
        summary = "Get image info by id",
        description = "List own image info by id",
        tags = { "Images" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = File.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearer-key")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/images/{imageId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<File> getImageInfoById(
        @Parameter(name = "imageId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("imageId") UUID imageId
    ) {
        return getDelegate().getImageInfoById(imageId);
    }


    /**
     * GET /user/images : List images
     * List own images
     *
     * @param page  (optional, default to 0)
     * @param size  (optional, default to 20)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getImageInfoList",
        summary = "List images",
        description = "List own images",
        tags = { "Images" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FilePage.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearer-key")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/images",
        produces = { "application/json" }
    )
    
    default ResponseEntity<FilePage> getImageInfoList(
        @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "size", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "20") Integer size
    ) {
        return getDelegate().getImageInfoList(page, size);
    }


    /**
     * POST /user/images : Upload image
     * Upload new image
     *
     * @param fileName  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "uploadImage",
        summary = "Upload image",
        description = "Upload new image",
        tags = { "Images" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        },
        security = {
            @SecurityRequirement(name = "bearer-key")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user/images",
        consumes = { "multipart/form-data" }
    )
    
    default ResponseEntity<Void> uploadImage(
        @Parameter(name = "fileName", description = "") @Valid @RequestParam(value = "fileName", required = false) String fileName
    ) {
        return getDelegate().uploadImage(fileName);
    }

}
