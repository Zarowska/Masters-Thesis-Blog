/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.zarowska.cirkle.api.rest;

import com.zarowska.cirkle.api.model.CreatePostRequest;
import com.zarowska.cirkle.api.model.Post;
import com.zarowska.cirkle.api.model.PostsPage;
import java.util.UUID;
import com.zarowska.cirkle.api.model.UpdatePostRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-02-06T01:58:39.202110500+01:00[Europe/Warsaw]")
@Validated
@Tag(name = "Posts", description = "the Posts API")
public interface PostsApi {

    default PostsApiDelegate getDelegate() {
        return new PostsApiDelegate() {};
    }

    /**
     * POST /users/{userId}/posts : Create a post
     * Create a new post
     *
     * @param userId  (required)
     * @param createPostRequest  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createPost",
        summary = "Create a post",
        description = "Create a new post",
        tags = { "Posts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Post.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearer-key")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/{userId}/posts",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Post> createPost(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") UUID userId,
        @Parameter(name = "CreatePostRequest", description = "") @Valid @RequestBody(required = false) CreatePostRequest createPostRequest
    ) {
        return getDelegate().createPost(userId, createPostRequest);
    }


    /**
     * DELETE /users/{userId}/posts/{postId} : Delete post by id
     * Delete user&#39;s post by id
     *
     * @param userId  (required)
     * @param postId  (required)
     * @return No Content (status code 204)
     */
    @Operation(
        operationId = "deleteUserPostById",
        summary = "Delete post by id",
        description = "Delete user's post by id",
        tags = { "Posts" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content")
        },
        security = {
            @SecurityRequirement(name = "bearer-key")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/users/{userId}/posts/{postId}"
    )
    
    default ResponseEntity<Void> deleteUserPostById(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") UUID userId,
        @Parameter(name = "postId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("postId") UUID postId
    ) {
        return getDelegate().deleteUserPostById(userId, postId);
    }


    /**
     * GET /users/{userId}/posts/{postId} : Get user&#39;s post by post id
     * Get users post by post id
     *
     * @param userId  (required)
     * @param postId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getUserPostByPostId",
        summary = "Get user's post by post id",
        description = "Get users post by post id",
        tags = { "Posts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Post.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearer-key")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{userId}/posts/{postId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Post> getUserPostByPostId(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") UUID userId,
        @Parameter(name = "postId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("postId") UUID postId
    ) {
        return getDelegate().getUserPostByPostId(userId, postId);
    }


    /**
     * GET /users/{userId}/posts : Get user&#39;s posts
     * List users post by id
     *
     * @param userId  (required)
     * @param page  (optional)
     * @param size  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "listUsersPostsByUserId",
        summary = "Get user's posts",
        description = "List users post by id",
        tags = { "Posts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PostsPage.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearer-key")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{userId}/posts",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PostsPage> listUsersPostsByUserId(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") UUID userId,
        @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false) Integer page,
        @Parameter(name = "size", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false) Integer size
    ) {
        return getDelegate().listUsersPostsByUserId(userId, page, size);
    }


    /**
     * PUT /users/{userId}/posts/{postId} : Update post by id
     * Update users post by id
     *
     * @param userId  (required)
     * @param postId  (required)
     * @param updatePostRequest  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateUserPostById",
        summary = "Update post by id",
        description = "Update users post by id",
        tags = { "Posts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Post.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearer-key")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/users/{userId}/posts/{postId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Post> updateUserPostById(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") UUID userId,
        @Parameter(name = "postId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("postId") UUID postId,
        @Parameter(name = "UpdatePostRequest", description = "") @Valid @RequestBody(required = false) UpdatePostRequest updatePostRequest
    ) {
        return getDelegate().updateUserPostById(userId, postId, updatePostRequest);
    }

}
