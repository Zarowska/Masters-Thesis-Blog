/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.zarowska.cirkle.api.rest;

import com.zarowska.cirkle.api.model.CreateReactionRequest;
import com.zarowska.cirkle.api.model.Reaction;
import com.zarowska.cirkle.api.model.ReactionList;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-02-06T01:58:39.202110500+01:00[Europe/Warsaw]")
@Validated
@Tag(name = "CommentReactions", description = "the CommentReactions API")
public interface CommentReactionsApi {

    default CommentReactionsApiDelegate getDelegate() {
        return new CommentReactionsApiDelegate() {};
    }

    /**
     * POST /users/{userId}/posts/{postId}/comments/{commentId}/reactions : Add reaction to comment
     * Add reaction to the comment
     *
     * @param userId  (required)
     * @param postId  (required)
     * @param commentId  (required)
     * @param createReactionRequest  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "addCommentReaction",
        summary = "Add reaction to comment",
        description = "Add reaction to the comment",
        tags = { "CommentReactions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Reaction.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearer-key")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/{userId}/posts/{postId}/comments/{commentId}/reactions",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Reaction> addCommentReaction(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") UUID userId,
        @Parameter(name = "postId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("postId") UUID postId,
        @Parameter(name = "commentId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("commentId") UUID commentId,
        @Parameter(name = "CreateReactionRequest", description = "") @Valid @RequestBody(required = false) CreateReactionRequest createReactionRequest
    ) {
        return getDelegate().addCommentReaction(userId, postId, commentId, createReactionRequest);
    }


    /**
     * DELETE /users/{userId}/posts/{postId}/comments/{commentId}/reactions/{reactionId} : Delete comment&#39;s reaction
     * Delete comment reaction by id
     *
     * @param userId  (required)
     * @param postId  (required)
     * @param commentId  (required)
     * @param reactionId  (required)
     * @return No Content (status code 204)
     */
    @Operation(
        operationId = "deleteCommentReactionById",
        summary = "Delete comment's reaction",
        description = "Delete comment reaction by id",
        tags = { "CommentReactions" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content")
        },
        security = {
            @SecurityRequirement(name = "bearer-key")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/users/{userId}/posts/{postId}/comments/{commentId}/reactions/{reactionId}"
    )
    
    default ResponseEntity<Void> deleteCommentReactionById(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") UUID userId,
        @Parameter(name = "postId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("postId") UUID postId,
        @Parameter(name = "commentId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("commentId") UUID commentId,
        @Parameter(name = "reactionId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("reactionId") UUID reactionId
    ) {
        return getDelegate().deleteCommentReactionById(userId, postId, commentId, reactionId);
    }


    /**
     * GET /users/{userId}/posts/{postId}/comments/{commentId}/reactions/{reactionId} : Get comment&#39;s reaction by id
     * Get comment reaction by id
     *
     * @param userId  (required)
     * @param postId  (required)
     * @param commentId  (required)
     * @param reactionId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getCommentReactionById",
        summary = "Get comment's reaction by id",
        description = "Get comment reaction by id",
        tags = { "CommentReactions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Reaction.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearer-key")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{userId}/posts/{postId}/comments/{commentId}/reactions/{reactionId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Reaction> getCommentReactionById(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") UUID userId,
        @Parameter(name = "postId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("postId") UUID postId,
        @Parameter(name = "commentId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("commentId") UUID commentId,
        @Parameter(name = "reactionId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("reactionId") UUID reactionId
    ) {
        return getDelegate().getCommentReactionById(userId, postId, commentId, reactionId);
    }


    /**
     * GET /users/{userId}/posts/{postId}/comments/{commentId}/reactions : Get comment&#39;s reactions
     * List comment reactions
     *
     * @param userId  (required)
     * @param postId  (required)
     * @param commentId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "listCommentReactionsById",
        summary = "Get comment's reactions",
        description = "List comment reactions",
        tags = { "CommentReactions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ReactionList.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearer-key")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{userId}/posts/{postId}/comments/{commentId}/reactions",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ReactionList> listCommentReactionsById(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") UUID userId,
        @Parameter(name = "postId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("postId") UUID postId,
        @Parameter(name = "commentId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("commentId") UUID commentId
    ) {
        return getDelegate().listCommentReactionsById(userId, postId, commentId);
    }

}
