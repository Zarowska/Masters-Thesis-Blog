/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.zarowska.cirkle.api.rest;

import com.zarowska.cirkle.api.model.ApiError;
import com.zarowska.cirkle.api.model.FriendshipRequest;
import com.zarowska.cirkle.api.model.FriendshipRequestList;
import java.util.UUID;
import com.zarowska.cirkle.api.model.UserPage;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-02-06T01:58:39.202110500+01:00[Europe/Warsaw]")
@Validated
@Tag(name = "Relations", description = "the Relations API")
public interface RelationsApi {

    default RelationsApiDelegate getDelegate() {
        return new RelationsApiDelegate() {};
    }

    /**
     * POST /user/requests/{requestId} : Accept friendship request by id
     * Accept incomming frenship request for current user by id
     *
     * @param requestId  (required)
     * @return No Content (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "acceptFriendshipRequestById",
        summary = "Accept friendship request by id",
        description = "Accept incomming frenship request for current user by id",
        tags = { "Relations" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearer-key")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user/requests/{requestId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> acceptFriendshipRequestById(
        @Parameter(name = "requestId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("requestId") UUID requestId
    ) {
        return getDelegate().acceptFriendshipRequestById(requestId);
    }


    /**
     * DELETE /users/{userId}/friends/{friendId} : Unfriend user by id
     * Delete friend by id
     *
     * @param userId  (required)
     * @param friendId  (required)
     * @return No Content (status code 204)
     */
    @Operation(
        operationId = "deleteFriendFromUsersFriendsById",
        summary = "Unfriend user by id",
        description = "Delete friend by id",
        tags = { "Relations" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content")
        },
        security = {
            @SecurityRequirement(name = "bearer-key")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/users/{userId}/friends/{friendId}"
    )
    
    default ResponseEntity<Void> deleteFriendFromUsersFriendsById(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") UUID userId,
        @Parameter(name = "friendId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("friendId") UUID friendId
    ) {
        return getDelegate().deleteFriendFromUsersFriendsById(userId, friendId);
    }


    /**
     * GET /user/requests : User&#39;s friendship requests
     * Get incomming frenship requests for current user
     *
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "findAllFriendshipRequests",
        summary = "User's friendship requests",
        description = "Get incomming frenship requests for current user",
        tags = { "Relations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FriendshipRequestList.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearer-key")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/requests",
        produces = { "application/json" }
    )
    
    default ResponseEntity<FriendshipRequestList> findAllFriendshipRequests(
        
    ) {
        return getDelegate().findAllFriendshipRequests();
    }


    /**
     * GET /user/requests/{requestId} : Get friendship request by id
     * Get incomming frenship request by id
     *
     * @param requestId  (required)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "getFriendshipRequestById",
        summary = "Get friendship request by id",
        description = "Get incomming frenship request by id",
        tags = { "Relations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FriendshipRequest.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearer-key")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/requests/{requestId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<FriendshipRequest> getFriendshipRequestById(
        @Parameter(name = "requestId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("requestId") UUID requestId
    ) {
        return getDelegate().getFriendshipRequestById(requestId);
    }


    /**
     * GET /users/{userId}/friends
     * List user&#39;s friends
     *
     * @param userId  (required)
     * @param page  (optional)
     * @param size  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getUsersFriendsById",
        description = "List user's friends",
        tags = { "Relations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserPage.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearer-key")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{userId}/friends",
        produces = { "application/json" }
    )
    
    default ResponseEntity<UserPage> getUsersFriendsById(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") UUID userId,
        @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false) Integer page,
        @Parameter(name = "size", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false) Integer size
    ) {
        return getDelegate().getUsersFriendsById(userId, page, size);
    }


    /**
     * DELETE /user/requests/{requestId} : Reject friendship request by id
     * Reject incomming frenship request for current user by id
     *
     * @param requestId  (required)
     * @return No Content (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "rejectFriendshipRequestById",
        summary = "Reject friendship request by id",
        description = "Reject incomming frenship request for current user by id",
        tags = { "Relations" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearer-key")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/user/requests/{requestId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> rejectFriendshipRequestById(
        @Parameter(name = "requestId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("requestId") UUID requestId
    ) {
        return getDelegate().rejectFriendshipRequestById(requestId);
    }


    /**
     * POST /users/{userId}/friends
     * Send user a friendship request
     *
     * @param userId  (required)
     * @return Created (status code 201)
     */
    @Operation(
        operationId = "sendFrindshipRequest",
        description = "Send user a friendship request",
        tags = { "Relations" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created")
        },
        security = {
            @SecurityRequirement(name = "bearer-key")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/{userId}/friends"
    )
    
    default ResponseEntity<Void> sendFrindshipRequest(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") UUID userId
    ) {
        return getDelegate().sendFrindshipRequest(userId);
    }

}
