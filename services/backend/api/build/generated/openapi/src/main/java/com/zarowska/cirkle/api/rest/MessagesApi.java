/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.zarowska.cirkle.api.rest;

import com.zarowska.cirkle.api.model.ApiError;
import java.math.BigDecimal;
import com.zarowska.cirkle.api.model.Message;
import com.zarowska.cirkle.api.model.MessageEventList;
import com.zarowska.cirkle.api.model.MessagePage;
import java.util.UUID;
import com.zarowska.cirkle.api.model.UpdateUserMessageRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-02-06T01:58:39.202110500+01:00[Europe/Warsaw]")
@Validated
@Tag(name = "Messages", description = "the Messages API")
public interface MessagesApi {

    default MessagesApiDelegate getDelegate() {
        return new MessagesApiDelegate() {};
    }

    /**
     * DELETE /user/messages/{messageId} : Delete message by id
     * Delete own message by id
     *
     * @param messageId  (required)
     * @return No Content (status code 204)
     */
    @Operation(
        operationId = "deleteMessageById",
        summary = "Delete message by id",
        description = "Delete own message by id",
        tags = { "Messages" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content")
        },
        security = {
            @SecurityRequirement(name = "bearer-key")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/user/messages/{messageId}"
    )
    
    default ResponseEntity<Void> deleteMessageById(
        @Parameter(name = "messageId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("messageId") UUID messageId
    ) {
        return getDelegate().deleteMessageById(messageId);
    }


    /**
     * GET /user/messages/{messageId} : Get message by id
     * Get own message by id
     *
     * @param messageId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getMessageById",
        summary = "Get message by id",
        description = "Get own message by id",
        tags = { "Messages" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Message.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearer-key")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/messages/{messageId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Message> getMessageById(
        @Parameter(name = "messageId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("messageId") UUID messageId
    ) {
        return getDelegate().getMessageById(messageId);
    }


    /**
     * GET /users/{userId}/messages
     * Get dialog with user
     *
     * @param userId  (required)
     * @param page  (optional)
     * @param size  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getMessagesByUserId",
        description = "Get dialog with user",
        tags = { "Messages" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MessagePage.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearer-key")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{userId}/messages",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MessagePage> getMessagesByUserId(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") UUID userId,
        @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false) BigDecimal page,
        @Parameter(name = "size", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false) BigDecimal size
    ) {
        return getDelegate().getMessagesByUserId(userId, page, size);
    }


    /**
     * GET /user/messages/events : Unread messages events
     * Get message events 
     *
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "getUnreadMessageEvents",
        summary = "Unread messages events",
        description = "Get message events ",
        tags = { "Messages" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MessageEventList.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearer-key")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/messages/events",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MessageEventList> getUnreadMessageEvents(
        
    ) {
        return getDelegate().getUnreadMessageEvents();
    }


    /**
     * POST /user/messages/{messageId}/read : Mark message readed by id
     * Mark message as readed
     *
     * @param messageId  (required)
     * @return No Content (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "markMessageReadById",
        summary = "Mark message readed by id",
        description = "Mark message as readed",
        tags = { "Messages" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearer-key")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user/messages/{messageId}/read",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> markMessageReadById(
        @Parameter(name = "messageId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("messageId") UUID messageId
    ) {
        return getDelegate().markMessageReadById(messageId);
    }


    /**
     * POST /users/{userId}/messages
     * Send user a message
     *
     * @param userId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "sendMessageToUserById",
        description = "Send user a message",
        tags = { "Messages" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        },
        security = {
            @SecurityRequirement(name = "bearer-key")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/{userId}/messages"
    )
    
    default ResponseEntity<Void> sendMessageToUserById(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") UUID userId
    ) {
        return getDelegate().sendMessageToUserById(userId);
    }


    /**
     * PUT /user/messages/{messageId} : Update message by id
     * Update own message by id
     *
     * @param messageId  (required)
     * @param updateUserMessageRequest  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateMessageById",
        summary = "Update message by id",
        description = "Update own message by id",
        tags = { "Messages" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Message.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearer-key")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/user/messages/{messageId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Message> updateMessageById(
        @Parameter(name = "messageId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("messageId") UUID messageId,
        @Parameter(name = "UpdateUserMessageRequest", description = "") @Valid @RequestBody(required = false) UpdateUserMessageRequest updateUserMessageRequest
    ) {
        return getDelegate().updateMessageById(messageId, updateUserMessageRequest);
    }

}
