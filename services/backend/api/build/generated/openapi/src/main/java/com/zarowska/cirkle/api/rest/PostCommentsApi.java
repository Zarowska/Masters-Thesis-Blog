/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.zarowska.cirkle.api.rest;

import com.zarowska.cirkle.api.model.Comment;
import com.zarowska.cirkle.api.model.CommentPage;
import com.zarowska.cirkle.api.model.CreateCommentRequest;
import java.util.UUID;
import com.zarowska.cirkle.api.model.UpdateCommentRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-02-06T01:58:39.202110500+01:00[Europe/Warsaw]")
@Validated
@Tag(name = "PostComments", description = "the PostComments API")
public interface PostCommentsApi {

    default PostCommentsApiDelegate getDelegate() {
        return new PostCommentsApiDelegate() {};
    }

    /**
     * POST /users/{userId}/posts/{postId}/comments : Create a post comment
     * Add comment to the post
     *
     * @param userId  (required)
     * @param postId  (required)
     * @param createCommentRequest  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "addPostComment",
        summary = "Create a post comment",
        description = "Add comment to the post",
        tags = { "PostComments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Comment.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearer-key")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/{userId}/posts/{postId}/comments",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Comment> addPostComment(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") UUID userId,
        @Parameter(name = "postId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("postId") UUID postId,
        @Parameter(name = "CreateCommentRequest", description = "") @Valid @RequestBody(required = false) CreateCommentRequest createCommentRequest
    ) {
        return getDelegate().addPostComment(userId, postId, createCommentRequest);
    }


    /**
     * DELETE /users/{userId}/posts/{postId}/comments/{commentId} : Delete post&#39;s comment
     * Delete post comment by id
     *
     * @param userId  (required)
     * @param postId  (required)
     * @param commentId  (required)
     * @return No Content (status code 204)
     */
    @Operation(
        operationId = "deletePostCommentById",
        summary = "Delete post's comment",
        description = "Delete post comment by id",
        tags = { "PostComments" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content")
        },
        security = {
            @SecurityRequirement(name = "bearer-key")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/users/{userId}/posts/{postId}/comments/{commentId}"
    )
    
    default ResponseEntity<Void> deletePostCommentById(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") UUID userId,
        @Parameter(name = "postId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("postId") UUID postId,
        @Parameter(name = "commentId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("commentId") UUID commentId
    ) {
        return getDelegate().deletePostCommentById(userId, postId, commentId);
    }


    /**
     * GET /users/{userId}/posts/{postId}/comments/{commentId} : Get post&#39;s comment
     * Get post comment by id
     *
     * @param userId  (required)
     * @param postId  (required)
     * @param commentId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getPostCommentById",
        summary = "Get post's comment",
        description = "Get post comment by id",
        tags = { "PostComments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Comment.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearer-key")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{userId}/posts/{postId}/comments/{commentId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Comment> getPostCommentById(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") UUID userId,
        @Parameter(name = "postId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("postId") UUID postId,
        @Parameter(name = "commentId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("commentId") UUID commentId
    ) {
        return getDelegate().getPostCommentById(userId, postId, commentId);
    }


    /**
     * GET /users/{userId}/posts/{postId}/comments : Get post&#39;s comment
     * List post comments
     *
     * @param userId  (required)
     * @param postId  (required)
     * @param page  (optional)
     * @param size  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "listPostCommentsById",
        summary = "Get post's comment",
        description = "List post comments",
        tags = { "PostComments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CommentPage.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearer-key")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{userId}/posts/{postId}/comments",
        produces = { "application/json" }
    )
    
    default ResponseEntity<CommentPage> listPostCommentsById(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") UUID userId,
        @Parameter(name = "postId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("postId") UUID postId,
        @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false) Integer page,
        @Parameter(name = "size", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false) Integer size
    ) {
        return getDelegate().listPostCommentsById(userId, postId, page, size);
    }


    /**
     * PUT /users/{userId}/posts/{postId}/comments/{commentId} : Update post&#39;s comment
     * Update post comment by id
     *
     * @param userId  (required)
     * @param postId  (required)
     * @param commentId  (required)
     * @param updateCommentRequest  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updatePostCommentById",
        summary = "Update post's comment",
        description = "Update post comment by id",
        tags = { "PostComments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Comment.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearer-key")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/users/{userId}/posts/{postId}/comments/{commentId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Comment> updatePostCommentById(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") UUID userId,
        @Parameter(name = "postId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("postId") UUID postId,
        @Parameter(name = "commentId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("commentId") UUID commentId,
        @Parameter(name = "UpdateCommentRequest", description = "") @Valid @RequestBody(required = false) UpdateCommentRequest updateCommentRequest
    ) {
        return getDelegate().updatePostCommentById(userId, postId, commentId, updateCommentRequest);
    }

}
